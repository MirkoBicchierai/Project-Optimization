import numpy as np
from DataSet import DataSet
from Function import Function
from Solver import Solver
import matplotlib.pyplot as plt
import scipy.optimize as sc

list_w_LBFGSB = []


def print_callback(wk):
    global list_w_LBFGSB
    list_w_LBFGSB.append(wk)


"""  
This function is used for fill the vector of solutions with the last element of L-BFGS algorithm in case has reached convergence before 
a certain number of iterations (N).
"""


def fill_to_n_with_last_element(lst, N):
    if len(lst) >= N:
        return lst[:N]
    else:
        last_element = lst[-1] if lst else 0
        return lst + [last_element] * (N - len(lst))


"""  
This function is used to plot with matplotlib a single curve in a graph (x,y are arguments).
"""


def plot(file_name, x, y):
    fig, ax = plt.subplots()
    ax.plot(x, y, linewidth=2.0)
    plt.grid(True)
    plt.savefig("Plot/" + file_name)


"""  
This function is used to plot with matplotlib all curve generated by all method 
"LBFGS-B", "SGD", "SGD-M", "SAG", "SAGV2", "SAG-L", "SAGV2-L".
The time graph it doesn't have "LBFGS-B" because the sc.minimize function don't return the execution time each itereration

"""


def plot_full(file_name, label, x, y, x_label):
    plt.subplots()
    x = np.array(x)
    y = np.array(y)
    if x_label == "Time":
        for i in range(x.shape[0]):
            x[i][0] = 0.1
            plt.plot(x[i], y[i + 1], label=label[i + 1])
    else:
        for i in range(x.shape[0]):
            plt.plot(x[i] + 1, y[i], label=label[i]) # , marker='.'
    plt.xlabel(x_label)
    plt.ylabel('Loss')
    plt.title('Training loss - ' + x_label)
    plt.xscale('log')
    plt.legend()
    plt.grid(True)
    plt.savefig("Plot/" + file_name)


"""  
The following 8 function one for each dataset used is used to set the value of alpha and beta for all alghoritms 
The value of alpha and beta there are inside are the best value that i fuond for each dataset.
"""


def phishing(f, dataset, epochs):
    labels = ["LBFGS-B", "SAG-L", "SAGV2-L" , "SGD", "SGD-M", "SAG", "SAGV2"]

    print("-------------------------------------------------------------------")
    print("DataSet: phishing")

    dataset.load_data("DataSet/phishing", "phishing")
    dataset.fix(0)
    f.set_lamda(1 / dataset.data_train.shape[0])

    print("Samples: " + str(dataset.data_train.shape[0] + dataset.data_test.shape[0]) + "  features: " + str(
        dataset.data_train.shape[1]))
    dataset.print_balance()
    dataset.count_non_zeros()
    print("-------------------------------------------------------------------")

    lr_sgd = 1e-4
    beta_sgd = 0.35
    lr_sag = 5 * 1e-5
    lr_sagv2 = 3 * 1e-5

    test(f, dataset, epochs, labels, lr_sgd, beta_sgd, lr_sag, lr_sagv2)


def ijcnn1(f, dataset, epochs):
    labels = ["LBFGS-B", "SGD", "SGD-M", "SAG", "SAGV2", "SAG-L", "SAGV2-L"]

    print("-------------------------------------------------------------------")
    print("DataSet: ijcnn1")

    dataset.load_data("DataSet/ijcnn1", "ijcnn1")
    f.set_lamda(1 / dataset.data_train.shape[0])

    print("Samples: " + str(dataset.data_train.shape[0] + dataset.data_test.shape[0]) + "  features: " + str(
        dataset.data_train.shape[1]))
    dataset.print_balance()
    dataset.count_non_zeros()
    print("-------------------------------------------------------------------")

    lr_sgd = 1e-5
    beta_sgd = 0.35
    lr_sag = 2 * 1e-5
    lr_sagv2 = 6 * 1e-6

    test(f, dataset, epochs, labels, lr_sgd, beta_sgd, lr_sag, lr_sagv2)


def german_numer_scale(f, dataset, epochs):
    labels = ["LBFGS-B", "SGD", "SGD-M", "SAG", "SAGV2", "SAG-L", "SAGV2-L"]  #

    print("-------------------------------------------------------------------")
    print("DataSet: german_numer_scale")

    dataset.load_data("DataSet/german_numer_scale", "german_numer_scale")
    f.set_lamda(1 / dataset.data_train.shape[0])
    dataset.count_non_zeros()

    print("Samples: " + str(dataset.data_train.shape[0] + dataset.data_test.shape[0]) + "  features: " + str(
        dataset.data_train.shape[1]))
    dataset.print_balance()
    print("-------------------------------------------------------------------")

    lr_sgd = 1e-3
    beta_sgd = 0.25
    lr_sag = 3*1e-3
    lr_sagv2 = 3 * 1e-3

    test(f, dataset, epochs, labels, lr_sgd, beta_sgd, lr_sag, lr_sagv2)


def australian(f, dataset, epochs):
    labels = ["LBFGS-B", "SGD", "SGD-M", "SAG", "SAGV2", "SAG-L", "SAGV2-L"]

    print("-------------------------------------------------------------------")
    print("DataSet: Australian")

    dataset.load_data("DataSet/australian_scale", "australian")
    f.set_lamda(1 / dataset.data_train.shape[0])

    print("Samples: " + str(dataset.data_train.shape[0] + dataset.data_test.shape[0]) + "  features: " + str(
        dataset.data_train.shape[1]))
    dataset.print_balance()
    dataset.count_non_zeros()
    print("-------------------------------------------------------------------")

    lr_sgd = 2 * 1e-4
    beta_sgd = 0.4
    lr_sag = 3 * 1e-4
    lr_sagv2 = 1e-4

    test(f, dataset, epochs, labels, lr_sgd, beta_sgd, lr_sag, lr_sagv2)


def a5a(f, dataset, epochs):
    labels = ["LBFGS-B", "SGD", "SGD-M", "SAG", "SAGV2", "SAG-L", "SAGV2-L"]  #

    print("-------------------------------------------------------------------")
    print("DataSet: a5a")

    dataset.load_data("DataSet/a5a", "a5a")
    f.set_lamda(1 / dataset.data_train.shape[0])

    print("Samples: " + str(dataset.data_train.shape[0] + dataset.data_test.shape[0]) + "  features: " + str(
        dataset.data_train.shape[1]))
    dataset.print_balance()
    dataset.count_non_zeros()
    print("-------------------------------------------------------------------")

    lr_sgd = 4 * 1e-5
    beta_sgd = 0.3
    lr_sag = 5 * 1e-5
    lr_sagv2 = 2*1e-4

    test(f, dataset, epochs, labels, lr_sgd, beta_sgd, lr_sag, lr_sagv2)


def a6a(f, dataset, epochs):
    labels = ["LBFGS-B", "SGD", "SGD-M", "SAG", "SAGV2", "SAG-L", "SAGV2-L"]

    print("-------------------------------------------------------------------")
    print("DataSet: a6a")

    dataset.load_data("DataSet/a6a", "a6a")
    f.set_lamda(1 / dataset.data_train.shape[0])

    print("Samples: " + str(dataset.data_train.shape[0] + dataset.data_test.shape[0]) + "  features: " + str(
        dataset.data_train.shape[1]))
    dataset.print_balance()
    dataset.count_non_zeros()
    print("-------------------------------------------------------------------")

    lr_sgd = 2 * 1e-5
    beta_sgd = 0.4
    lr_sag = 3 * 1e-5
    lr_sagv2 = 1e-5

    test(f, dataset, epochs, labels, lr_sgd, beta_sgd, lr_sag, lr_sagv2)


def a7a(f, dataset, epochs):
    labels = ["LBFGS-B", "SGD", "SGD-M", "SAG", "SAGV2", "SAG-L", "SAGV2-L"]

    print("-------------------------------------------------------------------")
    print("DataSet: a7a")

    dataset.load_data("DataSet/a7a", "a7a")
    f.set_lamda(1 / dataset.data_train.shape[0])

    print("Samples: " + str(dataset.data_train.shape[0] + dataset.data_test.shape[0]) + "  features: " + str(
        dataset.data_train.shape[1]))
    dataset.print_balance()
    dataset.count_non_zeros()
    print("-------------------------------------------------------------------")

    lr_sgd = (1.5) * 1e-5
    beta_sgd = 0.5
    lr_sag = 2 * 1e-5
    lr_sagv2 = 5 * 1e-6

    test(f, dataset, epochs, labels, lr_sgd, beta_sgd, lr_sag, lr_sagv2)


def a8a(f, dataset, epochs):
    labels = ["LBFGS-B", "SGD", "SGD-M", "SAG", "SAGV2", "SAG-L", "SAGV2-L"]

    print("-------------------------------------------------------------------")
    print("DataSet: a8a")

    dataset.load_data("DataSet/a8a", "a8a")
    f.set_lamda(1 / dataset.data_train.shape[0])

    print("Samples: " + str(dataset.data_train.shape[0] + dataset.data_test.shape[0]) + "  features: " + str(
        dataset.data_train.shape[1]))
    dataset.print_balance()
    dataset.count_non_zeros()
    print("-------------------------------------------------------------------")

    lr_sgd = 1e-5
    beta_sgd = 0.35
    lr_sag = 2 * 1e-5
    lr_sagv2 = 4 * 1e-6

    test(f, dataset, epochs, labels, lr_sgd, beta_sgd, lr_sag, lr_sagv2)


"""  
This function call all the alghoritm method inside the Solver Class and print/plot all the results
"""


def test(f, dataset, epochs, labels, lr_sgd, beta_sgd, lr_sag, lr_sagv2):
    global list_w_LBFGSB
    list_w_LBFGSB = []

    x_time_all = []
    y_loss_all = []
    x_step_all = []

    w = np.ones(dataset.data_train.shape[1], dtype="float128")
    sol = sc.minimize(dataset.loss_function, w, method='L-BFGS-B',
                      jac=dataset.loss_gradient, callback=print_callback, options={'maxiter': epochs}).x

    print("Accuracy L-BFGS-B: " + str(round(f.testing(dataset.data_test, dataset.labels_test, sol), 2)) + "%")

    print("Norm solution:", np.linalg.norm(sol))
    print("-------------------------------------------------------------------")
    list_w_LBFGSB = [w] + list_w_LBFGSB
    list_w_LBFGSB = fill_to_n_with_last_element(list_w_LBFGSB, epochs + 1)
    list_f_LBFGSB = []
    list_epoch = []
    for i in range(len(list_w_LBFGSB)):
        list_epoch.append(i)
        list_f_LBFGSB.append(dataset.loss_function(list_w_LBFGSB[i]))
    x_step_all.append(list_epoch)
    y_loss_all.append(list_f_LBFGSB)

    if "SGD" in labels:
        print("SGD Algorithms")
        _, x_step, y_loss, x_times, acc = exe.sgd(f, dataset, epochs, lr_sgd)
        plot(dataset.name + "/sgd_result.png", x_step, y_loss)
        plot(dataset.name + "/sgd_result_time.png", x_times, y_loss)
        x_time_all.append(x_times)
        y_loss_all.append(y_loss)
        x_step_all.append(x_step)
        print("Accuracy SGD: " + str(round(acc, 2)) + "%")

    if "SGD-M" in labels:
        print("SGD-M Algorithms")
        _, x_step, y_loss, x_times, acc = exe.sgd_momentum(f, dataset, epochs, lr_sgd, beta_sgd)
        plot(dataset.name + "/sgd_momentum_result.png", x_step, y_loss)
        plot(dataset.name + "/sgd_momentum_result_time.png", x_times, y_loss)
        x_time_all.append(x_times)
        y_loss_all.append(y_loss)
        x_step_all.append(x_step)
        print("Accuracy SGD Momentum: " + str(round(acc, 2)) + "%")

    if "SAG" in labels:
        print("SAG Algorithms")
        batch_size = int(dataset.data_train.shape[0] / 4)
        _, x_step, y_loss, x_times, acc = exe.sag_algorithm(f, dataset, epochs, lr_sag)
        plot(dataset.name + "/sag_result.png", x_step, y_loss)
        plot(dataset.name + "/sag_result_time.png", x_times, y_loss)
        x_time_all.append(x_times)
        y_loss_all.append(y_loss)
        x_step_all.append(x_step)
        print("Accuracy SAG: " + str(round(acc, 2)) + "%")

    if "SAGV2" in labels:
        print("SAGV2 Algorithms")
        _, x_step, y_loss, x_times, acc = exe.sag_algorithm_v2(f, dataset, epochs, lr_sagv2)
        plot(dataset.name + "/sagV2_result.png", x_step, y_loss)
        plot(dataset.name + "/sagV2_result_time.png", x_times, y_loss)
        x_time_all.append(x_times)
        y_loss_all.append(y_loss)
        x_step_all.append(x_step)
        print("Accuracy SAGV2: " + str(round(acc, 2)) + "%")

    if "SAG-L" in labels:
        print("SAG-L Algorithms")
        _, x_step, y_loss, x_times, acc = exe.sag_algorithm(f, dataset, epochs)
        plot(dataset.name + "/sag_L_result.png", x_step, y_loss)
        plot(dataset.name + "/sag_L_result_time.png", x_times, y_loss)
        x_time_all.append(x_times)
        y_loss_all.append(y_loss)
        x_step_all.append(x_step)
        print("Accuracy SAG-LS: " + str(round(acc, 2)) + "%")

    if "SAGV2-L" in labels:
        print("SAGV2-L Algorithms")
        _, x_step, y_loss, x_times, acc = exe.sag_algorithm_v2(f, dataset, epochs)
        plot(dataset.name + "/sagV2-L_result.png", x_step, y_loss)
        plot(dataset.name + "/sagV2-L_result_time.png", x_times, y_loss)
        x_time_all.append(x_times)
        y_loss_all.append(y_loss)
        x_step_all.append(x_step)
        print("Accuracy SAGV2-LS: " + str(round(acc, 2)) + "%")

    plot_full(dataset.name + "/full_step_result_last_run.png", labels, x_step_all, y_loss_all, "Epochs")
    plot_full(dataset.name + "/full_time_result_last_run.png", labels, x_time_all, y_loss_all, "Time")


if __name__ == '__main__':
    threshold = 0.5
    split = 0.8
    epochs = 50
    np.random.seed(17)

    f = Function(threshold)
    dataset = DataSet(split)
    exe = Solver()

    # ijcnn1(f, dataset, epochs)
    # a8a(f, dataset, epochs)
    # phishing(f, dataset, epochs)
    german_numer_scale(f, dataset, epochs)
    # australian(f, dataset, epochs)
    # a5a(f, dataset, epochs)
    # a6a(f, dataset, epochs)
    # a7a(f, dataset, epochs)
